import axios from 'axios';

// Sarvam AI API configuration
const SARVAM_API_KEY = import.meta.env.VITE_SARVAM_API_KEY;
const SARVAM_BASE_URL = 'https://api.sarvam.ai';

// Check if API key is properly configured
const isApiKeyValid = SARVAM_API_KEY && 
                     SARVAM_API_KEY !== 'your_sarvam_api_key_here' && 
                     SARVAM_API_KEY !== 'sk_zki2f2qi_Gx5KklYFU4C0tYBrkVApKQBs' && // Remove example key
                     SARVAM_API_KEY.trim() !== '' &&
                     SARVAM_API_KEY.startsWith('sk_'); // Ensure it's a valid Sarvam key format

// Create axios instance for Sarvam API
const sarvamApi = axios.create({
  baseURL: SARVAM_BASE_URL,
  headers: {
    'Authorization': `Bearer ${SARVAM_API_KEY}`,
    'Content-Type': 'application/json',
  },
  timeout: 30000,
});

// Language mapping for Sarvam API
export const sarvamLanguages = {
  'en': { code: 'en-IN', name: 'English', nativeName: 'English' },
  'hi': { code: 'hi-IN', name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА' },
  'bn': { code: 'bn-IN', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛' },
  'te': { code: 'te-IN', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б' },
  'mr': { code: 'mr-IN', name: 'Marathi', nativeName: 'рдорд░рд╛рдареА' },
  'ta': { code: 'ta-IN', name: 'Tamil', nativeName: 'родроорж┐ро┤рпН' },
  'gu': { code: 'gu-IN', name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА' },
  'kn': { code: 'kn-IN', name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б' },
  'ml': { code: 'ml-IN', name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В' },
  'pa': { code: 'pa-IN', name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА' },
  'or': { code: 'or-IN', name: 'Odia', nativeName: 'рмУрмбрм╝рм┐рмЖ' },
  'as': { code: 'as-IN', name: 'Assamese', nativeName: 'ржЕрж╕ржорзАржпрж╝рж╛' },
  'ur': { code: 'ur-IN', name: 'Urdu', nativeName: '╪з╪▒╪п┘И' }
};

// Enhanced Text-to-Speech using Sarvam API with robust fallback
export const sarvamTextToSpeech = async (
  text: string, 
  language: string = 'en',
  speaker: string = 'meera'
): Promise<string | null> => {
  console.log('ЁЯОд TTS Request:', { 
    text: text.substring(0, 50) + '...', 
    language, 
    speaker, 
    apiKeyValid: isApiKeyValid 
  });

  if (!isApiKeyValid) {
    console.warn('ЁЯОд Sarvam API key not configured, using fallback TTS');
    return 'fallback'; // Indicate fallback should be used
  }

  try {
    const languageCode = sarvamLanguages[language as keyof typeof sarvamLanguages]?.code || 'en-IN';
    
    console.log('ЁЯОд Calling Sarvam TTS API with:', { languageCode, speaker });
    
    const response = await sarvamApi.post('/text-to-speech', {
      inputs: [text],
      target_language_code: languageCode,
      speaker: speaker,
      pitch: 0,
      pace: 1.0,
      loudness: 1.0,
      speech_sample_rate: 8000,
      enable_preprocessing: true,
      model: "bulbul:v1"
    });

    if (response.data && response.data.audios && response.data.audios.length > 0) {
      console.log('ЁЯОд Sarvam TTS successful');
      return response.data.audios[0];
    }

    console.warn('ЁЯОд Sarvam TTS returned no audio data');
    return 'fallback';
  } catch (error) {
    console.error('ЁЯОд Sarvam TTS error:', error);
    
    // Check for specific error types
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 401) {
        console.error('ЁЯОд Invalid Sarvam API key');
      } else if (error.response?.status === 429) {
        console.error('ЁЯОд Sarvam API rate limit exceeded');
      } else if (error.code === 'ECONNABORTED') {
        console.error('ЁЯОд Sarvam API timeout');
      }
    }
    
    return 'fallback';
  }
};

// Enhanced Speech-to-Text using Sarvam API with robust fallback
export const sarvamSpeechToText = async (
  audioBlob: Blob,
  language: string = 'en'
): Promise<string | null> => {
  console.log('ЁЯОд STT Request:', { 
    language, 
    apiKeyValid: isApiKeyValid, 
    blobSize: audioBlob.size 
  });

  if (!isApiKeyValid) {
    console.warn('ЁЯОд Sarvam API key not configured, STT not available');
    return null;
  }

  try {
    const languageCode = sarvamLanguages[language as keyof typeof sarvamLanguages]?.code || 'en-IN';
    
    // Convert blob to base64
    const base64Audio = await blobToBase64(audioBlob);
    
    console.log('ЁЯОд Calling Sarvam STT API with:', { languageCode });
    
    const response = await sarvamApi.post('/speech-to-text', {
      language_code: languageCode,
      audio: base64Audio,
      model: "saaras:v1"
    });

    if (response.data && response.data.transcript) {
      console.log('ЁЯОд Sarvam STT successful:', response.data.transcript);
      return response.data.transcript;
    }

    console.warn('ЁЯОд Sarvam STT returned no transcript');
    return null;
  } catch (error) {
    console.error('ЁЯОд Sarvam STT error:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 401) {
        console.error('ЁЯОд Invalid Sarvam API key for STT');
      } else if (error.response?.status === 429) {
        console.error('ЁЯОд Sarvam STT API rate limit exceeded');
      }
    }
    
    return null;
  }
};

// Enhanced Translation using Sarvam API
export const sarvamTranslate = async (
  text: string,
  sourceLanguage: string = 'en',
  targetLanguage: string = 'hi'
): Promise<string | null> => {
  console.log('ЁЯМР Translation Request:', { 
    text: text.substring(0, 50) + '...', 
    sourceLanguage, 
    targetLanguage, 
    apiKeyValid: isApiKeyValid 
  });

  if (!isApiKeyValid) {
    console.warn('ЁЯМР Sarvam API key not configured, translation not available');
    return text; // Return original text if no translation available
  }

  // Don't translate if source and target are the same
  if (sourceLanguage === targetLanguage) {
    return text;
  }

  try {
    const sourceLangCode = sarvamLanguages[sourceLanguage as keyof typeof sarvamLanguages]?.code || 'en-IN';
    const targetLangCode = sarvamLanguages[targetLanguage as keyof typeof sarvamLanguages]?.code || 'hi-IN';
    
    console.log('ЁЯМР Calling Sarvam Translation API with:', { sourceLangCode, targetLangCode });
    
    const response = await sarvamApi.post('/translate', {
      input: text,
      source_language_code: sourceLangCode,
      target_language_code: targetLangCode,
      speaker_gender: "Female",
      mode: "formal",
      model: "mayura:v1",
      enable_preprocessing: true
    });

    if (response.data && response.data.translated_text) {
      console.log('ЁЯМР Sarvam translation successful');
      return response.data.translated_text;
    }

    console.warn('ЁЯМР Sarvam translation returned no result');
    return text; // Return original if translation fails
  } catch (error) {
    console.error('ЁЯМР Sarvam translation error:', error);
    return text; // Return original text on error
  }
};

// Enhanced multilingual chat response with Sarvam translation
export const generateMultilingualResponse = async (
  message: string,
  targetLanguage: string = 'en',
  context: 'mental-health' | 'general' | 'job-search' = 'general'
): Promise<{ text: string; audio?: string }> => {
  try {
    console.log('ЁЯдЦ Generating multilingual response:', { 
      message: message.substring(0, 50) + '...', 
      targetLanguage, 
      context 
    });

    // First get response in English (assuming Gemini works best in English)
    const { generateChatResponse } = await import('./geminiApi');
    const englishResponse = await generateChatResponse(message, 'en', context);
    
    let finalText = englishResponse;
    
    // Translate to target language if not English
    if (targetLanguage !== 'en') {
      const translatedText = await sarvamTranslate(englishResponse, 'en', targetLanguage);
      if (translatedText && translatedText !== englishResponse) {
        finalText = translatedText;
      }
    }
    
    // Generate audio using Sarvam TTS
    const audioData = await sarvamTextToSpeech(finalText, targetLanguage);
    
    return {
      text: finalText,
      audio: audioData && audioData !== 'fallback' ? audioData : undefined
    };
  } catch (error) {
    console.error('ЁЯдЦ Multilingual response generation error:', error);
    
    // Fallback response in the target language
    const fallbackResponses: { [key: string]: string } = {
      'en': 'I apologize, but I\'m having trouble responding right now. Please try again.',
      'hi': 'рдореБрдЭреЗ рдЦреБрд╢реА рд╣реИ рдХрд┐ рдЖрдк рдпрд╣рд╛рдБ рд╣реИрдВред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
      'bn': 'ржЖржорж┐ ржжрзБржГржЦрж┐ржд, ржХрж┐ржирзНрждрзБ ржЖржорж┐ ржПржЦржи ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
      'te': 'р░ир▒Зр░ир▒Б р░Хр▒Нр░╖тАМр░ор░╛р░кр░гр░▓р▒Б, р░Хр░╛р░ир▒А р░ир▒Зр░ир▒Б р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░кр▒Нр░░р░др░┐р░╕р▒Нр░кр░Вр░жр░┐р░Вр░Ър░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐ р░кр░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Бред р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐ред',
      'ta': 'роиро╛ройрпН рооройрпНройро┐роХрпНроХро┐ро▒рпЗройрпН, роЖройро╛ро▓рпН роиро╛ройрпН роЗрокрпНрокрпЛродрпБ рокродро┐ро▓ро│ро┐рокрпНрокродро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роЙро│рпНро│родрпБред родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпНред',
      'mr': 'рдорд▓рд╛ рдорд╛рдл рдХрд░рд╛, рдкрдг рдорд▓рд╛ рдЖрддреНрддрд╛ рдЙрддреНрддрд░ рджреЗрдгреНрдпрд╛рдд рдЕрдбрдЪрдг рдпреЗрдд рдЖрд╣реЗ. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.',
      'gu': 'рк╣рлБркВ ркорк╛рклрлА ркорк╛ркВркЧрлБ ркЫрлБркВ, рккрк░ркВркдрлБ ркоркирлЗ ркЕркдрлНркпрк╛рк░рлЗ ркЬрк╡рк╛ркм ркЖрккрк╡рк╛ркорк╛ркВ ркорлБрк╢рлНркХрлЗрк▓рлА ркЖрк╡рлА рк░рк╣рлА ркЫрлЗ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.',
      'kn': 'р▓ир▓╛р▓ир│Б р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓Жр▓жр▓░р│Ж р▓ир▓╛р▓ир│Б р▓Ир▓Ч р▓кр│Нр▓░р▓др▓┐р▓Хр│Нр▓░р▓┐р▓пр▓┐р▓╕р▓▓р│Б р▓др│Кр▓Вр▓жр▓░р│Ж р▓╣р│Кр▓Вр▓жр▓┐р▓жр│Нр▓жр│Зр▓ир│Ж. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.',
      'ml': 'р┤Юр┤╛р╡╗ р┤Хр╡Нр┤╖р┤ор┤╛р┤кр┤гр┤В, р┤кр┤Хр╡Нр┤╖р╡З р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Зр┤кр╡Нр┤кр╡Лр╡╛ р┤кр╡Нр┤░р┤др┤┐р┤Хр┤░р┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤ор╡Бр┤гр╡Нр┤Яр╡Н. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
      'pa': 'риорйИриВ риори╛рилрйА риЪри╛ри╣рйБрй░рижри╛ ри╣ри╛риВ, рикри░ риорйИриирйВрй░ ри╣рйБриг риЬри╡ри╛рим рижрйЗриг ри╡ри┐рй▒риЪ риорйБри╕ри╝риХри▓ риЖ ри░ри╣рйА ри╣рйИред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред',
      'or': 'рморнБрмБ рмХрнНрм╖рморм╛ рмкрнНрм░рм╛рм░рнНрмермирм╛ рмХрм░рнБрмЫрм┐, рмХрм┐рмирнНрмдрнБ рморнБрмБ рммрм░рнНрмдрнНрмдрморм╛рми рмЙрмдрнНрмдрм░ рмжрнЗрммрм╛рм░рнЗ рмЕрм╕рнБрммрм┐рмзрм╛ рм╣рнЗрмЙрмЫрм┐ред рмжрнЯрм╛рмХрм░рм┐ рмкрнБрмирм░рнНрммрм╛рм░ рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБред',
      'as': 'ржоржЗ ржХрзНрж╖ржорж╛ ржмрж┐ржЪрж╛рз░рзЛ, ржХрж┐ржирзНрждрзБ ржоржЗ ржПрждрж┐ржпрж╝рж╛ ржЙрждрзНрждрз░ ржжрж┐ржпрж╝рж╛ржд ржЕрж╕рзБржмрж┐ржзрж╛ ржкрж╛ржЗржЫрзЛред ржЕржирзБржЧрзНрз░рж╣ ржХрз░рж┐ ржкрзБржирз░ ржЪрзЗрж╖рзНржЯрж╛ ржХрз░ржХред',
      'ur': '┘Е█М┌║ ┘Е╪╣╪░╪▒╪к ╪о┘И╪з█Б █Б┘И┌║╪М ┘Д█М┌й┘Ж ┘Е╪м┌╛█Т ╪з╪и┌╛█М ╪м┘И╪з╪и ╪п█М┘Ж█Т ┘Е█М┌║ ┘Е╪┤┌й┘Д █Б┘И ╪▒█Б█М █Б█Т█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф'
    };
    
    return { 
      text: fallbackResponses[targetLanguage] || fallbackResponses['en']
    };
  }
};

// Voice conversation handler with improved error handling
export const handleVoiceConversation = async (
  audioBlob: Blob,
  language: string = 'en',
  context: 'mental-health' | 'general' | 'job-search' = 'general'
): Promise<{ transcript: string; response: string; responseAudio?: string }> => {
  try {
    console.log('ЁЯОЩя╕П Handling voice conversation:', { 
      language, 
      context, 
      blobSize: audioBlob.size 
    });

    // Convert speech to text using Sarvam API
    const transcript = await sarvamSpeechToText(audioBlob, language);
    
    if (!transcript) {
      throw new Error('Could not transcribe audio');
    }

    console.log('ЁЯОЩя╕П Transcript received:', transcript);

    // Generate multilingual response
    const { text: response, audio: responseAudio } = await generateMultilingualResponse(
      transcript,
      language,
      context
    );
    
    return {
      transcript,
      response,
      responseAudio
    };
  } catch (error) {
    console.error('ЁЯОЩя╕П Voice conversation error:', error);
    
    const errorResponses: { [key: string]: string } = {
      'en': 'I had trouble understanding your voice message. Please try speaking again or type your message.',
      'hi': 'рдореБрдЭреЗ рдЖрдкрдХрд╛ рд╡реЙрдпрд╕ рдореИрд╕реЗрдЬ рд╕рдордЭрдиреЗ рдореЗрдВ рдкрд░реЗрд╢рд╛рдиреА рд╣реБрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдмреЛрд▓рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВред',
      'bn': 'ржЖржорж┐ ржЖржкржирж╛рж░ ржнржпрж╝рзЗрж╕ ржмрж╛рж░рзНрждрж╛ ржмрзБржЭрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржмрж▓рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛ ржЯрж╛ржЗржк ржХрж░рзБржиред',
      'te': 'р░ор▒А р░╡р░╛р░пр░┐р░╕р▒Н р░╕р░Вр░жр▒Зр░╢р░╛р░ир▒Нр░ир░┐ р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░╡р░бр░Вр░▓р▒Л р░ир░╛р░Хр▒Б р░Зр░мр▒Нр░мр░Вр░жр░┐ р░Йр░Вр░жр░┐ред р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Яр░╛р░ир░┐р░Хр░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░ор▒А р░╕р░Вр░жр▒Зр░╢р░╛р░ир▒Нр░ир░┐ р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐ред',
      'ta': 'роЙроЩрпНроХро│рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИрокрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро╡родро┐ро▓рпН роОройроХрпНроХрпБ роЪро┐роХрпНроХро▓рпН роЗро░рпБроирпНродродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН рокрпЗроЪ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпНред',
      'mr': 'рддреБрдордЪрд╛ рд╡реНрд╣реЙрдЗрд╕ рдореЗрд╕реЗрдЬ рд╕рдордЬрдгреНрдпрд╛рдд рдорд▓рд╛ рдЕрдбрдЪрдг рдЖрд▓реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдмреЛрд▓рдгреНрдпрд╛рдЪрд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рддреБрдордЪрд╛ рдореЗрд╕реЗрдЬ рдЯрд╛рдЗрдк рдХрд░рд╛.',
      'gu': 'ркдркорк╛рк░рк╛ рк╡рлЙркЗрк╕ ркорлЗрк╕рлЗркЬркирлЗ рк╕ркоркЬрк╡рк╛ркорк╛ркВ ркоркирлЗ ркорлБрк╢рлНркХрлЗрк▓рлА рккркбрлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлАркерлА ркмрлЛрк▓рк╡рк╛ркирлЛ рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ ркЕркерк╡рк╛ ркдркорк╛рк░рлЛ ркорлЗрк╕рлЗркЬ ркЯрк╛ркЗркк ркХрк░рлЛ.',
      'kn': 'р▓ир▓┐р▓ор│Нр▓о р▓зр│Нр▓╡р▓ир▓┐ р▓╕р▓Вр▓жр│Зр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Ер▓░р│Нр▓ер▓ор▓╛р▓бр▓┐р▓Хр│Кр▓│р│Нр▓│р│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓ир▓ир▓Чр│Ж р▓др│Кр▓Вр▓жр▓░р│Ж р▓Зр▓др│Нр▓др│Б. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓ор▓╛р▓др▓ир▓╛р▓бр▓▓р│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐ р▓Ер▓ер▓╡р▓╛ р▓ир▓┐р▓ор│Нр▓о р▓╕р▓Вр▓жр│Зр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐.',
      'ml': 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Лр┤пр╡НтАМр┤╕р╡Н р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤ор┤ир┤╕р╡Нр┤╕р┤┐р┤▓р┤╛р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤мр╡Бр┤жр╡Нр┤зр┤┐р┤ор╡Бр┤Яр╡Нр┤Яр╡Бр┤гр╡Нр┤Яр┤╛р┤пр┤┐. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.',
      'pa': 'риорйИриирйВрй░ ридрйБри╣ри╛рибрйЗ ри╡рйМриЗри╕ риорйИри╕рйЗриЬ риирйВрй░ ри╕риориЭриг ри╡ри┐рй▒риЪ риорйБри╕ри╝риХри▓ риЖриИред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ римрйЛри▓риг рижрйА риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ риЬри╛риВ риЖрикригри╛ риорйИри╕рйЗриЬ риЯри╛риИрик риХри░рйЛред',
      'ur': '┘Е╪м┌╛█Т ╪в┘╛ ┌й╪з ┘И╪з╪ж╪│ ┘Е█М╪│╪м ╪│┘Е╪м┌╛┘Ж█Т ┘Е█М┌║ ┘Е╪┤┌й┘Д █Б┘И╪ж█М█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪п┘И╪и╪з╪▒█Б ╪и┘И┘Д┘Ж█Т ┌й█М ┌й┘И╪┤╪┤ ┌й╪▒█М┌║ █М╪з ╪з┘╛┘Ж╪з ┘╛█М╪║╪з┘Е ┘╣╪з╪ж┘╛ ┌й╪▒█М┌║█Ф'
    };
    
    return {
      transcript: '',
      response: errorResponses[language] || errorResponses['en'],
      responseAudio: undefined
    };
  }
};

// Language detection using enhanced fallback
export const detectLanguage = async (text: string): Promise<string | null> => {
  if (!isApiKeyValid) {
    // Enhanced language detection based on script and common words
    const patterns = {
      hi: /[\u0900-\u097F]|рдФрд░|рд╣реИ|рдореЗрдВ|рдХреЛ|рд╕реЗ|рдХрд╛|рдХреА|рдХреЗ|рдпрд╣|рд╡рд╣|рд╣рдо|рдЖрдк|рдореИрдВ|рддреБрдо|рд╣реЛ|рд╣реВрдВ|рдЧрдпрд╛|рдЧрдИ|рдХрд░рдирд╛|рд╣реЛрдирд╛|рдЬрд╛рдирд╛|рдЖрдирд╛|рджреЗрдирд╛|рд▓реЗрдирд╛|рдХрд╣рдирд╛|рджреЗрдЦрдирд╛|рдорд┐рд▓рдирд╛|рдЪрд▓рдирд╛|рдмрдирдирд╛|рд░рд╣рдирд╛/,
      bn: /[\u0980-\u09FF]|ржПржмржВ|рж╣ржпрж╝|ржоржзрзНржпрзЗ|ржерзЗржХрзЗ|ржПрж░|ржПржЗ|рж╕рзЗржЗ|ржЖржорж░рж╛|ржЖржкржирж┐|ржЖржорж┐|рждрзБржорж┐|рж╣ржУ|рж╣ржЗ|ржЧрзЗржЫрзЗ|ржЧрзЗрж▓|ржХрж░рж╛|рж╣ржУржпрж╝рж╛|ржпрж╛ржУржпрж╝рж╛|ржЖрж╕рж╛|ржжрзЗржУржпрж╝рж╛|ржирзЗржУржпрж╝рж╛|ржмрж▓рж╛|ржжрзЗржЦрж╛|ржкрж╛ржУржпрж╝рж╛|ржЪрж▓рж╛|рж╣ржУржпрж╝рж╛|ржерж╛ржХрж╛/,
      te: /[\u0C00-\u0C7F]|р░ор░░р░┐р░пр▒Б|р░Йр░Вр░жр░┐|р░▓р▒Л|р░ир▒Бр░Вр░бр░┐|р░пр▒Кр░Хр▒Нр░Х|р░И|р░Ж|р░ор▒Зр░ор▒Б|р░ор▒Ар░░р▒Б|р░ир▒Зр░ир▒Б|р░ир▒Бр░╡р▒Нр░╡р▒Б|р░Йр░ир▒Нр░ир░╛р░ир▒Б|р░Йр░ир▒Нр░ир░╛р░╡р▒Б|р░Ер░пр▒Нр░пр░╛р░ир▒Б|р░Ер░пр▒Нр░пр░╛р░╡р▒Б|р░Ър▒Зр░пр░бр░В|р░Йр░Вр░бр░Яр░В|р░╡р▒Жр░│р▒Нр░▓р░бр░В|р░░р░╛р░╡р░бр░В|р░Зр░╡р▒Нр░╡р░бр░В|р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░В|р░Ър▒Жр░кр▒Нр░кр░бр░В|р░Ър▒Вр░бр░бр░В|р░кр▒Кр░Вр░жр░бр░В|р░╡р▒Жр░│р▒Нр░▓р░бр░В|р░Ер░╡р▒Нр░╡р░бр░В|р░Йр░Вр░бр░Яр░В/,
      ta: /[\u0B80-\u0BFF]|рооро▒рпНро▒рпБроорпН|роЙро│рпНро│родрпБ|роЗро▓рпН|роЗро░рпБроирпНродрпБ|роЗройрпН|роЗроирпНрод|роЕроирпНрод|роиро╛роорпН|роирпАроЩрпНроХро│рпН|роиро╛ройрпН|роирпА|роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН|роЗро░рпБроХрпНроХро┐ро▒ро╛ропрпН|роЖройрпЗройрпН|роЖройро╛ропрпН|роЪрпЖропрпНро╡родрпБ|роЗро░рпБрокрпНрокродрпБ|рокрпЛро╡родрпБ|ро╡ро░рпБро╡родрпБ|роХрпКроЯрпБрокрпНрокродрпБ|роОроЯрпБрокрпНрокродрпБ|роЪрпКро▓рпНро╡родрпБ|рокро╛ро░рпНрокрпНрокродрпБ|рокрпЖро▒рпБро╡родрпБ|роЪрпЖро▓рпНро╡родрпБ|роЖро╡родрпБ|роЗро░рпБрокрпНрокродрпБ/,
      mr: /[\u0900-\u097F]|рдЖрдгрд┐|рдЖрд╣реЗ|рдордзреНрдпреЗ|рдкрд╛рд╕реВрди|рдЪрд╛|рд╣рд╛|рддреЛ|рдЖрдореНрд╣реА|рддреБрдореНрд╣реА|рдореА|рддреВ|рдЖрд╣реЗ|рдЖрд╣реЗрд╕|рдЭрд╛рд▓реЗ|рдЭрд╛рд▓реЗрд╕|рдХрд░рдгреЗ|рдЕрд╕рдгреЗ|рдЬрд╛рдгреЗ|рдпреЗрдгреЗ|рджреЗрдгреЗ|рдШреЗрдгреЗ|рдореНрд╣рдгрдгреЗ|рдкрд╛рд╣рдгреЗ|рдорд┐рд│рдгреЗ|рдЪрд╛рд▓рдгреЗ|рд╣реЛрдгреЗ|рд░рд╛рд╣рдгреЗ/,
      gu: /[\u0A80-\u0AFF]|ркЕркирлЗ|ркЫрлЗ|ркорк╛ркВ|ркерлА|ркирк╛|ркЖ|ркдрлЗ|ркЕркорлЗ|ркдркорлЗ|рк╣рлБркВ|ркдрлБркВ|ркЫрлБркВ|ркЫрлЛ|ркеркпрлБркВ|ркеркпрлЛ|ркХрк░рк╡рлБркВ|рк╣рлЛрк╡рлБркВ|ркЬрк╡рлБркВ|ркЖрк╡рк╡рлБркВ|ркЖрккрк╡рлБркВ|рк▓рлЗрк╡рлБркВ|ркХрк╣рлЗрк╡рлБркВ|ркЬрлЛрк╡рлБркВ|ркорк│рк╡рлБркВ|ркЪрк╛рк▓рк╡рлБркВ|ркерк╡рлБркВ|рк░рк╣рлЗрк╡рлБркВ/,
      kn: /[\u0C80-\u0CFF]|р▓ор▓др│Нр▓др│Б|р▓Зр▓жр│Ж|р▓ир▓▓р│Нр▓▓р▓┐|р▓Зр▓Вр▓ж|р▓ж|р▓И|р▓Ж|р▓ир▓╛р▓╡р│Б|р▓ир│Ар▓╡р│Б|р▓ир▓╛р▓ир│Б|р▓ир│Ар▓ир│Б|р▓Зр▓жр│Нр▓жр│Зр▓ир│Ж|р▓Зр▓жр│Нр▓жр│Ар▓п|р▓Жр▓жр│Ж|р▓Жр▓жр│Ар▓п|р▓ор▓╛р▓бр│Бр▓╡р│Бр▓жр│Б|р▓Зр▓░р│Бр▓╡р│Бр▓жр│Б|р▓╣р│Лр▓Чр│Бр▓╡р│Бр▓жр│Б|р▓мр▓░р│Бр▓╡р│Бр▓жр│Б|р▓Хр│Кр▓бр│Бр▓╡р│Бр▓жр│Б|р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р│Бр▓╡р│Бр▓жр│Б|р▓╣р│Зр▓│р│Бр▓╡р│Бр▓жр│Б|р▓ир│Лр▓бр│Бр▓╡р│Бр▓жр│Б|р▓кр▓бр│Жр▓пр│Бр▓╡р│Бр▓жр│Б|р▓ир▓бр│Жр▓пр│Бр▓╡р│Бр▓жр│Б|р▓Жр▓Чр│Бр▓╡р│Бр▓жр│Б|р▓Зр▓░р│Бр▓╡р│Бр▓жр│Б/,
      ml: /[\u0D00-\u0D7F]|р┤Тр┤кр╡Нр┤кр┤В|р┤Йр┤гр╡Нр┤Яр╡Н|р╡╜|р┤ир┤┐р┤ир╡Нр┤ир╡Н|р┤ир╡Нр┤▒р╡Ж|р┤И|р┤Ж|р┤Юр┤Щр╡Нр┤Щр╡╛|р┤ир┤┐р┤Щр╡Нр┤Щр╡╛|р┤Юр┤╛р╡╗|р┤ир╡А|р┤Йр┤гр╡Нр┤Яр╡Н|р┤Йр┤гр╡Нр┤Яр╡Н|р┤Жр┤пр┤┐|р┤Жр┤пр┤┐|р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х|р┤Жр┤Хр╡Бр┤Х|р┤кр╡Лр┤Хр╡Бр┤Х|р┤╡р┤░р┤┐р┤Х|р┤Хр╡Кр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х|р┤Ор┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х|р┤кр┤▒р┤пр╡Бр┤Х|р┤Хр┤╛р┤гр╡Бр┤Х|р┤Хр┤┐р┤Яр╡Нр┤Яр╡Бр┤Х|р┤ир┤Яр┤Хр╡Нр┤Хр╡Бр┤Х|р┤Жр┤Хр╡Бр┤Х|р┤Зр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х/,
      pa: /[\u0A00-\u0A7F]|риЕридрйЗ|ри╣рйИ|ри╡ри┐рй▒риЪ|ридрйЛриВ|рижри╛|риЗри╣|риЙри╣|риЕри╕рйАриВ|ридрйБри╕рйАриВ|риорйИриВ|ридрйВрй░|ри╣ри╛риВ|ри╣рйИриВ|ри╣рйЛриЗриЖ|ри╣рйЛриИ|риХри░риири╛|ри╣рйЛригри╛|риЬри╛ригри╛|риЖриЙригри╛|рижрйЗригри╛|ри▓рйИригри╛|риХри╣ри┐ригри╛|ри╡рйЗриЦригри╛|риори┐ри▓ригри╛|риЪрй▒ри▓ригри╛|римригриири╛|ри░ри╣ри┐ригри╛/,
      ur: /[\u0600-\u06FF]|╪з┘И╪▒|█Б█Т|┘Е█М┌║|╪│█Т|┌й╪з|█М█Б|┘И█Б|█Б┘Е|╪в┘╛|┘Е█М┌║|╪к┘Е|█Б┘И┌║|█Б┘И|█Б┘И╪з|█Б┘И╪ж█М|┌й╪▒┘Ж╪з|█Б┘И┘Ж╪з|╪м╪з┘Ж╪з|╪в┘Ж╪з|╪п█М┘Ж╪з|┘Д█М┘Ж╪з|┌й█Б┘Ж╪з|╪п█М┌й┌╛┘Ж╪з|┘Е┘Д┘Ж╪з|┌Ж┘Д┘Ж╪з|╪и┘Ж┘Ж╪з|╪▒█Б┘Ж╪з/
    };
    
    for (const [lang, pattern] of Object.entries(patterns)) {
      if (pattern.test(text)) {
        console.log('ЁЯМР Language detected (fallback):', lang);
        return lang;
      }
    }
    
    return 'en';
  }

  try {
    console.log('ЁЯМР Detecting language for text:', text.substring(0, 50) + '...');
    const response = await sarvamApi.post('/language-detection', {
      input: text
    });

    if (response.data && response.data.language_code) {
      const detectedLang = Object.entries(sarvamLanguages).find(
        ([_, lang]) => lang.code === response.data.language_code
      );
      
      const result = detectedLang ? detectedLang[0] : 'en';
      console.log('ЁЯМР Language detected (Sarvam):', result);
      return result;
    }

    return null;
  } catch (error) {
    console.error('ЁЯМР Language detection error:', error);
    return null;
  }
};

// Sentiment analysis in multiple languages
export const multilingualSentimentAnalysis = async (
  text: string,
  language: string = 'en'
): Promise<'positive' | 'negative' | 'neutral'> => {
  try {
    // If not English, translate to English first for better sentiment analysis
    let textToAnalyze = text;
    if (language !== 'en') {
      const translatedText = await sarvamTranslate(text, language, 'en');
      if (translatedText && translatedText !== text) {
        textToAnalyze = translatedText;
      }
    }
    
    // Use existing sentiment analysis
    const { analyzeSentiment } = await import('./geminiApi');
    return await analyzeSentiment(textToAnalyze);
  } catch (error) {
    console.error('ЁЯОн Multilingual sentiment analysis error:', error);
    return 'neutral';
  }
};

// Helper function to convert blob to base64
const blobToBase64 = (blob: Blob): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      const base64 = result.split(',')[1];
      resolve(base64);
    };
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
};

// Helper function to play base64 audio
export const playBase64Audio = (base64Audio: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    try {
      if (base64Audio === 'fallback') {
        resolve(); // Fallback TTS already handled
        return;
      }
      
      console.log('ЁЯФК Playing Sarvam audio...');
      const audio = new Audio(`data:audio/wav;base64,${base64Audio}`);
      
      audio.onended = () => {
        console.log('ЁЯФК Audio playback completed');
        resolve();
      };
      
      audio.onerror = (error) => {
        console.error('ЁЯФК Audio playback failed:', error);
        reject(new Error('Audio playback failed'));
      };
      
      audio.oncanplaythrough = () => {
        audio.play().catch(reject);
      };
      
      audio.load();
    } catch (error) {
      console.error('ЁЯФК Audio setup failed:', error);
      reject(error);
    }
  });
};

// API key validation with detailed feedback
export const validateSarvamApiKey = (): { isValid: boolean; message: string } => {
  if (!SARVAM_API_KEY) {
    return {
      isValid: false,
      message: 'VITE_SARVAM_API_KEY environment variable is not set. Using browser speech features as fallback.'
    };
  }
  
  if (SARVAM_API_KEY === 'your_sarvam_api_key_here' || SARVAM_API_KEY === 'sk_zki2f2qi_Gx5KklYFU4C0tYBrkVApKQBs') {
    return {
      isValid: false,
      message: 'Please replace the placeholder Sarvam API key with your actual API key. Using browser speech features as fallback.'
    };
  }
  
  if (SARVAM_API_KEY.trim() === '') {
    return {
      isValid: false,
      message: 'VITE_SARVAM_API_KEY is empty. Using browser speech features as fallback.'
    };
  }
  
  if (!SARVAM_API_KEY.startsWith('sk_')) {
    return {
      isValid: false,
      message: 'Invalid Sarvam API key format. Keys should start with "sk_". Using browser speech features as fallback.'
    };
  }
  
  return {
    isValid: true,
    message: 'Sarvam AI API is configured and ready for enhanced multilingual features.'
  };
};

// Get available voices for TTS
export const getSarvamVoices = async (language: string = 'en'): Promise<string[]> => {
  const voicesByLanguage: { [key: string]: string[] } = {
    'en': ['meera', 'arjun', 'kavya'],
    'hi': ['meera', 'arjun', 'kavya'],
    'bn': ['meera', 'arjun'],
    'te': ['meera', 'arjun'],
    'ta': ['meera', 'arjun'],
    'mr': ['meera', 'arjun'],
    'gu': ['meera', 'arjun'],
    'kn': ['meera', 'arjun'],
    'ml': ['meera', 'arjun'],
    'pa': ['meera', 'arjun'],
    'or': ['meera'],
    'as': ['meera'],
    'ur': ['meera', 'arjun']
  };
  
  return voicesByLanguage[language] || voicesByLanguage['en'];
};

export default {
  textToSpeech: sarvamTextToSpeech,
  speechToText: sarvamSpeechToText,
  translate: sarvamTranslate,
  generateMultilingualResponse,
  handleVoiceConversation,
  detectLanguage,
  multilingualSentimentAnalysis,
  playBase64Audio,
  validateSarvamApiKey,
  getSarvamVoices,
  languages: sarvamLanguages
};